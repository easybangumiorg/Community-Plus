// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户角色（普通用户、编辑、管理员）
enum Role {
  BLOCKED
  USER
  EDITOR
  ADMIN
}

// 更新状态表
enum UpdateState {
  FINISHED // 已完结
  AIRING // 连载中
  NOT_YET_RELEASED // 未放送
  CANCELLED // 已取消
}

// 站点状态表
enum SiteState {
  DRAFT // 草稿
  READY_PUB // 准备发布
  PUBLISHED // 已发布
}

// 分类表
model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  posts       Post[]
}

// 合集表
model Collection {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  lastUpdate     DateTime      @default(now())
  posts          Post[]
  author         User          @relation(fields: [authorId], references: [id])
  authorId       Int
  choreographyItem   ChoreographyItem[]

  title   String
  summary String
  cover   String?
  state   SiteState @default(DRAFT)
}

//编排与编排项目
model Choreography {
  id         Int                @id @default(autoincrement())
  items      ChoreographyItem[]
  title      String
  weight     Int
}
model ChoreographyItem { // 该表是Choreography与Collection的具有更多细节的多对多关系表
  id             Int          @id @default(autoincrement())
  choreography   Choreography @relation(fields: [choreographyId], references: [id])
  choreographyId Int
  title          String
  weight         Int
  collection     Collection  @relation(fields: [collectionId], references: [id])
  collectionId   Int
}

// 解析过程
model ParseMethod {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  lastUpdate DateTime   @default(now())
  author     User       @relation(fields: [authorId], references: [id])
  authorId   Int
  PlayLine   PlayLine[]

  name        String
  description String
  code        String    @unique // 如straight，这个仅在一阶段硬编码到插件的解析器中使用
  state       SiteState // 此处发布状态用于之后的流程处理，当标记为公开时所有用户均可使用
  flow        Json      // 解析流程，二阶段存储流程信息
}

// 用户表
model User {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  role        Role          @default(USER)
  posts       Post[]
  collections Collection[]
  parseMethod ParseMethod[]
  email       String        @unique
  password    String

  name   String
  bio    String @default("no bio.")
  avatar String @default("https://easybangumi.org/icons/FAVICON-RAW.png")
}

// 番剧上传表
model Post {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  lastUpdate DateTime     @default(now())
  author     User         @relation(fields: [authorId], references: [id])
  authorId   Int
  category   Category     @relation(fields: [categoryId], references: [id])
  categoryId Int
  collection Collection[]
  playLines  PlayLine[]

  state       SiteState
  updateState UpdateState
  nsfw        Boolean

  title          String
  publishDate    DateTime
  summary        String
  cover          String
  tags           PostTag[]
  extendmetaData Json
}

// 番剧标签
model PostTag {
  id    Int    @id @default(autoincrement())
  posts Post[]
  name  String @unique
}

model PlayLine {
  id            Int            @id @default(autoincrement())
  post          Post           @relation(fields: [postId], references: [id])
  postId        Int
  parseMethod   ParseMethod    @relation(fields: [parseMethodId], references: [id])
  parseMethodId Int
  playLineItem  PlayLineItem[]
  title         String
}

model PlayLineItem {
  id         Int      @id @default(autoincrement())
  playLine   PlayLine @relation(fields: [playLineId], references: [id])
  playLineId Int
  title      String
  item       String
}
